
Hello_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002038  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002200  08002200  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002200  08002200  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002200  08002200  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002214  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002214  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e9c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000126d  00000000  00000000  00026ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00028148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00028798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c9f  00000000  00000000  00028d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000598a  00000000  00000000  0004d9df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e466b  00000000  00000000  00053369  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001379d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001768  00000000  00000000  00137a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021a8 	.word	0x080021a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021a8 	.word	0x080021a8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f99c 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80b 	bl	80001ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f87e 	bl	80002d4 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // on for 500ms
 80001d8:	2120      	movs	r1, #32
 80001da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001de:	f000 fcd7 	bl	8000b90 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80001e2:	2032      	movs	r0, #50	; 0x32
 80001e4:	f000 fa0c 	bl	8000600 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // on for 500ms
 80001e8:	e7f6      	b.n	80001d8 <main+0x10>

080001ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b0b8      	sub	sp, #224	; 0xe0
 80001ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80001f4:	2244      	movs	r2, #68	; 0x44
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 ffcd 	bl	8002198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020e:	463b      	mov	r3, r7
 8000210:	2288      	movs	r2, #136	; 0x88
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f001 ffbf 	bl	8002198 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000234:	2302      	movs	r3, #2
 8000236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000240:	230a      	movs	r3, #10
 8000242:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000246:	2307      	movs	r3, #7
 8000248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800024c:	2302      	movs	r3, #2
 800024e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000252:	2302      	movs	r3, #2
 8000254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fd15 	bl	8000c8c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000268:	f000 f89c 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2303      	movs	r3, #3
 8000274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800028a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800028e:	2104      	movs	r1, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f8e1 	bl	8001458 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800029c:	f000 f882 	bl	80003a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a8:	463b      	mov	r3, r7
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 faa0 	bl	80017f0 <HAL_RCCEx_PeriphCLKConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80002b6:	f000 f875 	bl	80003a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002be:	f000 fc8f 	bl	8000be0 <HAL_PWREx_ControlVoltageScaling>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80002c8:	f000 f86c 	bl	80003a4 <Error_Handler>
  }
}
 80002cc:	bf00      	nop
 80002ce:	37e0      	adds	r7, #224	; 0xe0
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0xc4>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <MX_GPIO_Init+0xc4>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f6:	4b28      	ldr	r3, [pc, #160]	; (8000398 <MX_GPIO_Init+0xc4>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0304 	and.w	r3, r3, #4
 80002fe:	613b      	str	r3, [r7, #16]
 8000300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	4a24      	ldr	r2, [pc, #144]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <MX_GPIO_Init+0xc4>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a1e      	ldr	r2, [pc, #120]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	4a18      	ldr	r2, [pc, #96]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_GPIO_Init+0xc4>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000352:	f000 fc05 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_GPIO_Init+0xc8>)
 800035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	4619      	mov	r1, r3
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_GPIO_Init+0xcc>)
 800036c:	f000 fa50 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000370:	2320      	movs	r3, #32
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2300      	movs	r3, #0
 800037e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038a:	f000 fa41 	bl	8000810 <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3728      	adds	r7, #40	; 0x28
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	10210000 	.word	0x10210000
 80003a0:	48000800 	.word	0x48000800

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003aa:	e7fe      	b.n	80003aa <Error_Handler+0x6>

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <HAL_MspInit+0x44>)
 80003b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_MspInit+0x44>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6613      	str	r3, [r2, #96]	; 0x60
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_MspInit+0x44>)
 80003c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_MspInit+0x44>)
 80003cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_MspInit+0x44>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	6593      	str	r3, [r2, #88]	; 0x58
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_MspInit+0x44>)
 80003d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler+0x4>

080003fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <MemManage_Handler+0x4>

08000406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler+0x4>

08000412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000440:	f000 f8be 	bl	80005c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <SystemInit+0x64>)
 800044e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000452:	4a16      	ldr	r2, [pc, #88]	; (80004ac <SystemInit+0x64>)
 8000454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <SystemInit+0x68>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <SystemInit+0x68>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x68>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <SystemInit+0x68>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a0f      	ldr	r2, [pc, #60]	; (80004b0 <SystemInit+0x68>)
 8000474:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000478:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800047c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <SystemInit+0x68>)
 8000480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000484:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <SystemInit+0x68>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <SystemInit+0x68>)
 800048c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000490:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <SystemInit+0x68>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <SystemInit+0x64>)
 800049a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800049e:	609a      	str	r2, [r3, #8]
#endif
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	40021000 	.word	0x40021000

080004b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004b8:	f7ff ffc6 	bl	8000448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004be:	e003      	b.n	80004c8 <LoopCopyDataInit>

080004c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004c6:	3104      	adds	r1, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004c8:	480a      	ldr	r0, [pc, #40]	; (80004f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004d0:	d3f6      	bcc.n	80004c0 <CopyDataInit>
	ldr	r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80004d4:	e002      	b.n	80004dc <LoopFillZerobss>

080004d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004d8:	f842 3b04 	str.w	r3, [r2], #4

080004dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <LoopForever+0x16>)
	cmp	r2, r3
 80004de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004e0:	d3f9      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e2:	f001 fe35 	bl	8002150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004e6:	f7ff fe6f 	bl	80001c8 <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80004f0:	08002208 	.word	0x08002208
	ldr	r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004f8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80004fc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000500:	2000002c 	.word	0x2000002c

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_Init+0x3c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <HAL_Init+0x3c>)
 8000518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051e:	2003      	movs	r0, #3
 8000520:	f000 f942 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f80f 	bl	8000548 <HAL_InitTick>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	e001      	b.n	800053a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000536:	f7ff ff39 	bl	80003ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800053a:	79fb      	ldrb	r3, [r7, #7]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <HAL_InitTick+0x6c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d023      	beq.n	80005a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <HAL_InitTick+0x70>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_InitTick+0x6c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f93f 	bl	80007f6 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d10f      	bne.n	800059e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	d809      	bhi.n	8000598 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000584:	2200      	movs	r2, #0
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	f04f 30ff 	mov.w	r0, #4294967295
 800058c:	f000 f917 	bl	80007be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <HAL_InitTick+0x74>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	e007      	b.n	80005a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e004      	b.n	80005a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	e001      	b.n	80005a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a4:	2301      	movs	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x20>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x24>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_IncTick+0x24>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return uwTick;
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <HAL_GetTick+0x14>)
 80005ee:	681b      	ldr	r3, [r3, #0]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000028 	.word	0x20000028

08000600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000608:	f7ff ffee 	bl	80005e8 <HAL_GetTick>
 800060c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000618:	d005      	beq.n	8000626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_Delay+0x40>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000626:	bf00      	nop
 8000628:	f7ff ffde 	bl	80005e8 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d8f7      	bhi.n	8000628 <HAL_Delay+0x28>
  {
  }
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000008 	.word	0x20000008

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff47 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff5c 	bl	800068c <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffb0 	bl	8000764 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e17f      	b.n	8000b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8171 	beq.w	8000b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d00b      	beq.n	8000858 <HAL_GPIO_Init+0x48>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d007      	beq.n	8000858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	2b11      	cmp	r3, #17
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d130      	bne.n	80008ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800088e:	2201      	movs	r2, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	f003 0201 	and.w	r2, r3, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0303 	and.w	r3, r3, #3
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d118      	bne.n	80008f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008cc:	2201      	movs	r2, #1
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	f003 0201 	and.w	r2, r3, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d003      	beq.n	8000938 <HAL_GPIO_Init+0x128>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b12      	cmp	r3, #18
 8000936:	d123      	bne.n	8000980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	08da      	lsrs	r2, r3, #3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3208      	adds	r2, #8
 8000940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	220f      	movs	r2, #15
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	691a      	ldr	r2, [r3, #16]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	08da      	lsrs	r2, r3, #3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3208      	adds	r2, #8
 800097a:	6939      	ldr	r1, [r7, #16]
 800097c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2203      	movs	r2, #3
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0203 	and.w	r2, r3, #3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 80ac 	beq.w	8000b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <HAL_GPIO_Init+0x32c>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	4a5d      	ldr	r2, [pc, #372]	; (8000b3c <HAL_GPIO_Init+0x32c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6613      	str	r3, [r2, #96]	; 0x60
 80009ce:	4b5b      	ldr	r3, [pc, #364]	; (8000b3c <HAL_GPIO_Init+0x32c>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009da:	4a59      	ldr	r2, [pc, #356]	; (8000b40 <HAL_GPIO_Init+0x330>)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a04:	d025      	beq.n	8000a52 <HAL_GPIO_Init+0x242>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4e      	ldr	r2, [pc, #312]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01f      	beq.n	8000a4e <HAL_GPIO_Init+0x23e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <HAL_GPIO_Init+0x338>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d019      	beq.n	8000a4a <HAL_GPIO_Init+0x23a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4c      	ldr	r2, [pc, #304]	; (8000b4c <HAL_GPIO_Init+0x33c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x236>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4b      	ldr	r2, [pc, #300]	; (8000b50 <HAL_GPIO_Init+0x340>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x232>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4a      	ldr	r2, [pc, #296]	; (8000b54 <HAL_GPIO_Init+0x344>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x22e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a49      	ldr	r2, [pc, #292]	; (8000b58 <HAL_GPIO_Init+0x348>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x22a>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e00c      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	e00a      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a52:	2300      	movs	r3, #0
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	f002 0203 	and.w	r2, r2, #3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a64:	4936      	ldr	r1, [pc, #216]	; (8000b40 <HAL_GPIO_Init+0x330>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b14:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f47f ae78 	bne.w	8000820 <HAL_GPIO_Init+0x10>
  }
}
 8000b30:	bf00      	nop
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000c00 	.word	0x48000c00
 8000b50:	48001000 	.word	0x48001000
 8000b54:	48001400 	.word	0x48001400
 8000b58:	48001800 	.word	0x48001800
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43d9      	mvns	r1, r3
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40007000 	.word	0x40007000

08000be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bee:	d130      	bne.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfc:	d038      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2232      	movs	r2, #50	; 0x32
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c24:	e002      	b.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c38:	d102      	bne.n	8000c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f2      	bne.n	8000c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4c:	d110      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e00f      	b.n	8000c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5e:	d007      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40007000 	.word	0x40007000
 8000c84:	20000000 	.word	0x20000000
 8000c88:	431bde83 	.word	0x431bde83

08000c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e3d4      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c9e:	4ba1      	ldr	r3, [pc, #644]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca8:	4b9e      	ldr	r3, [pc, #632]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80e4 	beq.w	8000e88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x4a>
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b0c      	cmp	r3, #12
 8000cca:	f040 808b 	bne.w	8000de4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	f040 8087 	bne.w	8000de4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cd6:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x62>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e3ac      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <HAL_RCC_OscConfig+0x7c>
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d06:	e005      	b.n	8000d14 <HAL_RCC_OscConfig+0x88>
 8000d08:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d223      	bcs.n	8000d60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fd07 	bl	8001730 <RCC_SetFlashLatencyFromMSIRange>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e38d      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2c:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7c      	ldr	r2, [pc, #496]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b7a      	ldr	r3, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4977      	ldr	r1, [pc, #476]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4a:	4b76      	ldr	r3, [pc, #472]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	4972      	ldr	r1, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
 8000d5e:	e025      	b.n	8000dac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d60:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a6f      	ldr	r2, [pc, #444]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	496a      	ldr	r1, [pc, #424]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7e:	4b69      	ldr	r3, [pc, #420]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	4965      	ldr	r1, [pc, #404]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fcc7 	bl	8001730 <RCC_SetFlashLatencyFromMSIRange>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e34d      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dac:	f000 fc36 	bl	800161c <HAL_RCC_GetSysClockFreq>
 8000db0:	4601      	mov	r1, r0
 8000db2:	4b5c      	ldr	r3, [pc, #368]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	4a5a      	ldr	r2, [pc, #360]	; (8000f28 <HAL_RCC_OscConfig+0x29c>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc8:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <HAL_RCC_OscConfig+0x2a0>)
 8000dca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dcc:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fbb9 	bl	8000548 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d052      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	e331      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d032      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dec:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a4c      	ldr	r2, [pc, #304]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fbf6 	bl	80005e8 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e00:	f7ff fbf2 	bl	80005e8 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e31a      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	493b      	ldr	r1, [pc, #236]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	4936      	ldr	r1, [pc, #216]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	e01a      	b.n	8000e88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fbc3 	bl	80005e8 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e66:	f7ff fbbf 	bl	80005e8 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e2e7      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1da>
 8000e84:	e000      	b.n	8000e88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d074      	beq.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x21a>
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b0c      	cmp	r3, #12
 8000e9e:	d10e      	bne.n	8000ebe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d10b      	bne.n	8000ebe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d064      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d160      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e2c4      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x24a>
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e01d      	b.n	8000f12 <HAL_RCC_OscConfig+0x286>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ede:	d10c      	bne.n	8000efa <HAL_RCC_OscConfig+0x26e>
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e00b      	b.n	8000f12 <HAL_RCC_OscConfig+0x286>
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d01c      	beq.n	8000f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fb65 	bl	80005e8 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f20:	e011      	b.n	8000f46 <HAL_RCC_OscConfig+0x2ba>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	080021c0 	.word	0x080021c0
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fb58 	bl	80005e8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e280      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f46:	4baf      	ldr	r3, [pc, #700]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2a8>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f54:	f7ff fb48 	bl	80005e8 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fb44 	bl	80005e8 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e26c      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6e:	4ba5      	ldr	r3, [pc, #660]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2d0>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d060      	beq.n	800104c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d005      	beq.n	8000f9c <HAL_RCC_OscConfig+0x310>
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d119      	bne.n	8000fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d116      	bne.n	8000fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9c:	4b99      	ldr	r3, [pc, #612]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x328>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e249      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4b93      	ldr	r3, [pc, #588]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	4990      	ldr	r1, [pc, #576]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc8:	e040      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d023      	beq.n	800101a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd2:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a8b      	ldr	r2, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb03 	bl	80005e8 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe6:	f7ff faff 	bl	80005e8 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e227      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	4b7f      	ldr	r3, [pc, #508]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	061b      	lsls	r3, r3, #24
 8001012:	497c      	ldr	r1, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e018      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101a:	4b7a      	ldr	r3, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a79      	ldr	r2, [pc, #484]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001026:	f7ff fadf 	bl	80005e8 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fadb 	bl	80005e8 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e203      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001040:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03c      	beq.n	80010d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d01c      	beq.n	800109a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001060:	4b68      	ldr	r3, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001066:	4a67      	ldr	r2, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001070:	f7ff faba 	bl	80005e8 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fab6 	bl	80005e8 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1de      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800108a:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800108c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ef      	beq.n	8001078 <HAL_RCC_OscConfig+0x3ec>
 8001098:	e01b      	b.n	80010d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109a:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a0:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010aa:	f7ff fa9d 	bl	80005e8 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa99 	bl	80005e8 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1c1      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c4:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1ef      	bne.n	80010b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a6 	beq.w	800122c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e4:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10d      	bne.n	800110c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	4a43      	ldr	r2, [pc, #268]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001108:	2301      	movs	r3, #1
 800110a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d118      	bne.n	800114a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a3a      	ldr	r2, [pc, #232]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001124:	f7ff fa60 	bl	80005e8 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112c:	f7ff fa5c 	bl	80005e8 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e184      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d8>
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001158:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001162:	e024      	b.n	80011ae <HAL_RCC_OscConfig+0x522>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d110      	bne.n	800118e <HAL_RCC_OscConfig+0x502>
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800117e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001182:	4a20      	ldr	r2, [pc, #128]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118c:	e00f      	b.n	80011ae <HAL_RCC_OscConfig+0x522>
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80011a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80011a6:	f023 0304 	bic.w	r3, r3, #4
 80011aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa17 	bl	80005e8 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fa13 	bl	80005e8 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e139      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0ed      	beq.n	80011be <HAL_RCC_OscConfig+0x532>
 80011e2:	e01a      	b.n	800121a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fa00 	bl	80005e8 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ea:	e00f      	b.n	800120c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff f9fc 	bl	80005e8 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d906      	bls.n	800120c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e122      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800120c:	4b90      	ldr	r3, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800120e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e8      	bne.n	80011ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001220:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	4a8a      	ldr	r2, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8108 	beq.w	8001446 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	2b02      	cmp	r3, #2
 800123c:	f040 80d0 	bne.w	80013e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001240:	4b83      	ldr	r3, [pc, #524]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d130      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	3b01      	subs	r3, #1
 8001260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d127      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001270:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001272:	429a      	cmp	r2, r3
 8001274:	d11f      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001280:	2a07      	cmp	r2, #7
 8001282:	bf14      	ite	ne
 8001284:	2201      	movne	r2, #1
 8001286:	2200      	moveq	r2, #0
 8001288:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	3b01      	subs	r3, #1
 800129c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	3b01      	subs	r3, #1
 80012b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d06e      	beq.n	8001394 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d069      	beq.n	8001390 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b7      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a5c      	ldr	r2, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e4:	f7ff f980 	bl	80005e8 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff f97c 	bl	80005e8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0a4      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130a:	4b51      	ldr	r3, [pc, #324]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	4b51      	ldr	r3, [pc, #324]	; (8001454 <HAL_RCC_OscConfig+0x7c8>)
 8001310:	4013      	ands	r3, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800131a:	3a01      	subs	r2, #1
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001324:	0212      	lsls	r2, r2, #8
 8001326:	4311      	orrs	r1, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800132c:	0852      	lsrs	r2, r2, #1
 800132e:	3a01      	subs	r2, #1
 8001330:	0552      	lsls	r2, r2, #21
 8001332:	4311      	orrs	r1, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001338:	0852      	lsrs	r2, r2, #1
 800133a:	3a01      	subs	r2, #1
 800133c:	0652      	lsls	r2, r2, #25
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001344:	0912      	lsrs	r2, r2, #4
 8001346:	0452      	lsls	r2, r2, #17
 8001348:	430a      	orrs	r2, r1
 800134a:	4941      	ldr	r1, [pc, #260]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a3b      	ldr	r2, [pc, #236]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001368:	f7ff f93e 	bl	80005e8 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff f93a 	bl	80005e8 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e062      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138e:	e05a      	b.n	8001446 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e059      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d152      	bne.n	8001446 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013b8:	f7ff f916 	bl	80005e8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff f912 	bl	80005e8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e03a      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x734>
 80013de:	e032      	b.n	8001446 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d02d      	beq.n	8001442 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001404:	f023 0303 	bic.w	r3, r3, #3
 8001408:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001410:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001418:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff f8e5 	bl	80005e8 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff f8e1 	bl	80005e8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e009      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x796>
 8001440:	e001      	b.n	8001446 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000
 8001454:	f99d808c 	.word	0xf99d808c

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0c8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d910      	bls.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 0207 	bic.w	r2, r3, #7
 8001482:	4961      	ldr	r1, [pc, #388]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b0      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d04c      	beq.n	8001542 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b0:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d121      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e09e      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d115      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e092      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e086      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e07e      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 0203 	bic.w	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	493f      	ldr	r1, [pc, #252]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001512:	f7ff f869 	bl	80005e8 <HAL_GetTick>
 8001516:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001518:	e00a      	b.n	8001530 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151a:	f7ff f865 	bl	80005e8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e066      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 020c 	and.w	r2, r3, #12
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	429a      	cmp	r2, r3
 8001540:	d1eb      	bne.n	800151a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	492c      	ldr	r1, [pc, #176]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d210      	bcs.n	8001590 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4924      	ldr	r1, [pc, #144]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e036      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4918      	ldr	r1, [pc, #96]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4910      	ldr	r1, [pc, #64]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ce:	f000 f825 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015d2:	4601      	mov	r1, r0
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	fa21 f303 	lsr.w	r3, r1, r3
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffa8 	bl	8000548 <HAL_InitTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80015fc:	7afb      	ldrb	r3, [r7, #11]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	080021c0 	.word	0x080021c0
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001634:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x34>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d121      	bne.n	800168e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11e      	bne.n	800168e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	e005      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <HAL_RCC_GetSysClockFreq+0x108>)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10d      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d102      	bne.n	800169a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	e004      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b08      	cmp	r3, #8
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_GetSysClockFreq+0x110>)
 80016a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d133      	bne.n	8001712 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d002      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80016be:	e005      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016c2:	617b      	str	r3, [r7, #20]
      break;
 80016c4:	e005      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_GetSysClockFreq+0x110>)
 80016c8:	617b      	str	r3, [r7, #20]
      break;
 80016ca:	e002      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	617b      	str	r3, [r7, #20]
      break;
 80016d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	3301      	adds	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	fb02 f203 	mul.w	r2, r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0e5b      	lsrs	r3, r3, #25
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	3301      	adds	r3, #1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001710:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001712:	69bb      	ldr	r3, [r7, #24]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	080021d0 	.word	0x080021d0
 8001728:	00f42400 	.word	0x00f42400
 800172c:	007a1200 	.word	0x007a1200

08001730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001748:	f7ff fa3c 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 800174c:	6178      	str	r0, [r7, #20]
 800174e:	e014      	b.n	800177a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001768:	f7ff fa2c 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 800176c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d10b      	bne.n	800179a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b80      	cmp	r3, #128	; 0x80
 8001786:	d919      	bls.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2ba0      	cmp	r3, #160	; 0xa0
 800178c:	d902      	bls.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e013      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e010      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b80      	cmp	r3, #128	; 0x80
 800179e:	d902      	bls.n	80017a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017a0:	2303      	movs	r3, #3
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e00a      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d102      	bne.n	80017b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	e004      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b70      	cmp	r3, #112	; 0x70
 80017b6:	d101      	bne.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 0207 	bic.w	r2, r3, #7
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80017f8:	2300      	movs	r3, #0
 80017fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017fc:	2300      	movs	r3, #0
 80017fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03f      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001814:	d01c      	beq.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181a:	d802      	bhi.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001820:	e01f      	b.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001826:	d003      	beq.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800182c:	d01c      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800182e:	e018      	b.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a84      	ldr	r2, [pc, #528]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800183c:	e015      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fab9 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 800184a:	4603      	mov	r3, r0
 800184c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800184e:	e00c      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3320      	adds	r3, #32
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fba0 	bl	8001f9c <RCCEx_PLLSAI2_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001860:	e003      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	74fb      	strb	r3, [r7, #19]
      break;
 8001866:	e000      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800187e:	4972      	ldr	r1, [pc, #456]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001880:	4313      	orrs	r3, r2
 8001882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001886:	e001      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001888:	7cfb      	ldrb	r3, [r7, #19]
 800188a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03f      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d01c      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80018a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a6:	d802      	bhi.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80018ac:	e01f      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80018ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b2:	d003      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80018b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80018b8:	d01c      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80018ba:	e018      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018c8:	e015      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fa73 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 80018d6:	4603      	mov	r3, r0
 80018d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018da:	e00c      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3320      	adds	r3, #32
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fb5a 	bl	8001f9c <RCCEx_PLLSAI2_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018ec:	e003      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	74fb      	strb	r3, [r7, #19]
      break;
 80018f2:	e000      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80018f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018f6:	7cfb      	ldrb	r3, [r7, #19]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10b      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800190a:	494f      	ldr	r1, [pc, #316]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800190c:	4313      	orrs	r3, r2
 800190e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001912:	e001      	b.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a0 	beq.w	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001958:	2301      	movs	r3, #1
 800195a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001968:	f7fe fe3e 	bl	80005e8 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800196e:	e009      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7fe fe3a 	bl	80005e8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d902      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	74fb      	strb	r3, [r7, #19]
        break;
 8001982:	e005      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ef      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d15c      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01f      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d019      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7fe fdf9 	bl	80005e8 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f8:	e00b      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7fe fdf5 	bl	80005e8 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d902      	bls.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8001a10:	e006      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ec      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a36:	4904      	ldr	r1, [pc, #16]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a3e:	e009      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	74bb      	strb	r3, [r7, #18]
 8001a44:	e006      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a54:	7c7b      	ldrb	r3, [r7, #17]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b9e      	ldr	r3, [pc, #632]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	4a9d      	ldr	r2, [pc, #628]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a72:	4b98      	ldr	r3, [pc, #608]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a78:	f023 0203 	bic.w	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	4994      	ldr	r1, [pc, #592]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	f023 020c 	bic.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	498c      	ldr	r1, [pc, #560]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4983      	ldr	r1, [pc, #524]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	497b      	ldr	r1, [pc, #492]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	4972      	ldr	r1, [pc, #456]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b1c:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	496a      	ldr	r1, [pc, #424]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	4961      	ldr	r1, [pc, #388]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b60:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	4959      	ldr	r1, [pc, #356]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b82:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	4950      	ldr	r1, [pc, #320]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	4948      	ldr	r1, [pc, #288]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	493f      	ldr	r1, [pc, #252]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d028      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	4937      	ldr	r1, [pc, #220]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c12:	60d3      	str	r3, [r2, #12]
 8001c14:	e011      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f8c8 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001c30:	7cfb      	ldrb	r3, [r7, #19]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001c36:	7cfb      	ldrb	r3, [r7, #19]
 8001c38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d028      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	491f      	ldr	r1, [pc, #124]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c70:	60d3      	str	r3, [r2, #12]
 8001c72:	e011      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2101      	movs	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f899 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02b      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cc2:	d109      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a02      	ldr	r2, [pc, #8]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cce:	60d3      	str	r3, [r2, #12]
 8001cd0:	e014      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f867 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d02f      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f844 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d014      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d3e:	7cfb      	ldrb	r3, [r7, #19]
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	e011      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3320      	adds	r3, #32
 8001d52:	2102      	movs	r1, #2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f921 	bl	8001f9c <RCCEx_PLLSAI2_Config>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d5e:	7cfb      	ldrb	r3, [r7, #19]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d82:	490d      	ldr	r1, [pc, #52]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da6:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001dae:	7cbb      	ldrb	r3, [r7, #18]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000

08001dbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d018      	beq.n	8001e08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d10d      	bne.n	8001e02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
       ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001dee:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d044      	beq.n	8001e8c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e041      	b.n	8001e8c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d00c      	beq.n	8001e2a <RCCEx_PLLSAI1_Config+0x6e>
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d013      	beq.n	8001e3c <RCCEx_PLLSAI1_Config+0x80>
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d120      	bne.n	8001e5a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11d      	bne.n	8001e60 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e28:	e01a      	b.n	8001e60 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d116      	bne.n	8001e64 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3a:	e013      	b.n	8001e64 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10f      	bne.n	8001e68 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001e58:	e006      	b.n	8001e68 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5e:	e004      	b.n	8001e6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e60:	bf00      	nop
 8001e62:	e002      	b.n	8001e6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e68:	bf00      	nop
    }

    if(status == HAL_OK)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10d      	bne.n	8001e8c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e70:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	430b      	orrs	r3, r1
 8001e86:	4944      	ldr	r1, [pc, #272]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d17d      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fba3 	bl	80005e8 <HAL_GetTick>
 8001ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ea4:	e009      	b.n	8001eba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ea6:	f7fe fb9f 	bl	80005e8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d902      	bls.n	8001eba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	73fb      	strb	r3, [r7, #15]
        break;
 8001eb8:	e005      	b.n	8001ec6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ef      	bne.n	8001ea6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d160      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d111      	bne.n	8001ef6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ed2:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0211      	lsls	r1, r2, #8
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68d2      	ldr	r2, [r2, #12]
 8001ee8:	0912      	lsrs	r2, r2, #4
 8001eea:	0452      	lsls	r2, r2, #17
 8001eec:	430a      	orrs	r2, r1
 8001eee:	492a      	ldr	r1, [pc, #168]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	610b      	str	r3, [r1, #16]
 8001ef4:	e027      	b.n	8001f46 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d112      	bne.n	8001f22 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6892      	ldr	r2, [r2, #8]
 8001f0c:	0211      	lsls	r1, r2, #8
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6912      	ldr	r2, [r2, #16]
 8001f12:	0852      	lsrs	r2, r2, #1
 8001f14:	3a01      	subs	r2, #1
 8001f16:	0552      	lsls	r2, r2, #21
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	491f      	ldr	r1, [pc, #124]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	610b      	str	r3, [r1, #16]
 8001f20:	e011      	b.n	8001f46 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	0211      	lsls	r1, r2, #8
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6952      	ldr	r2, [r2, #20]
 8001f38:	0852      	lsrs	r2, r2, #1
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	0652      	lsls	r2, r2, #25
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	4915      	ldr	r1, [pc, #84]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7fe fb49 	bl	80005e8 <HAL_GetTick>
 8001f56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f58:	e009      	b.n	8001f6e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f5a:	f7fe fb45 	bl	80005e8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d902      	bls.n	8001f6e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	73fb      	strb	r3, [r7, #15]
          break;
 8001f6c:	e005      	b.n	8001f7a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ef      	beq.n	8001f5a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001faa:	4b68      	ldr	r3, [pc, #416]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d018      	beq.n	8001fe8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001fb6:	4b65      	ldr	r3, [pc, #404]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10d      	bne.n	8001fe2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d044      	beq.n	800206c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e041      	b.n	800206c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d00c      	beq.n	800200a <RCCEx_PLLSAI2_Config+0x6e>
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d013      	beq.n	800201c <RCCEx_PLLSAI2_Config+0x80>
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d120      	bne.n	800203a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ff8:	4b54      	ldr	r3, [pc, #336]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11d      	bne.n	8002040 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e01a      	b.n	8002040 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800200a:	4b50      	ldr	r3, [pc, #320]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201a:	e013      	b.n	8002044 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10f      	bne.n	8002048 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002028:	4b48      	ldr	r3, [pc, #288]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002038:	e006      	b.n	8002048 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      break;
 800203e:	e004      	b.n	800204a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002040:	bf00      	nop
 8002042:	e002      	b.n	800204a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002048:	bf00      	nop
    }

    if(status == HAL_OK)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	3b01      	subs	r3, #1
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	430b      	orrs	r3, r1
 8002066:	4939      	ldr	r1, [pc, #228]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d167      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a35      	ldr	r2, [pc, #212]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207e:	f7fe fab3 	bl	80005e8 <HAL_GetTick>
 8002082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002084:	e009      	b.n	800209a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002086:	f7fe faaf 	bl	80005e8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d902      	bls.n	800209a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	73fb      	strb	r3, [r7, #15]
        break;
 8002098:	e005      	b.n	80020a6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d14a      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d111      	bne.n	80020d6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6892      	ldr	r2, [r2, #8]
 80020c2:	0211      	lsls	r1, r2, #8
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68d2      	ldr	r2, [r2, #12]
 80020c8:	0912      	lsrs	r2, r2, #4
 80020ca:	0452      	lsls	r2, r2, #17
 80020cc:	430a      	orrs	r2, r1
 80020ce:	491f      	ldr	r1, [pc, #124]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	614b      	str	r3, [r1, #20]
 80020d4:	e011      	b.n	80020fa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6892      	ldr	r2, [r2, #8]
 80020e6:	0211      	lsls	r1, r2, #8
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6912      	ldr	r2, [r2, #16]
 80020ec:	0852      	lsrs	r2, r2, #1
 80020ee:	3a01      	subs	r2, #1
 80020f0:	0652      	lsls	r2, r2, #25
 80020f2:	430a      	orrs	r2, r1
 80020f4:	4915      	ldr	r1, [pc, #84]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fa6f 	bl	80005e8 <HAL_GetTick>
 800210a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800210c:	e009      	b.n	8002122 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800210e:	f7fe fa6b 	bl	80005e8 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d902      	bls.n	8002122 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	73fb      	strb	r3, [r7, #15]
          break;
 8002120:	e005      	b.n	800212e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ef      	beq.n	800210e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800213e:	4313      	orrs	r3, r2
 8002140:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000

08002150 <__libc_init_array>:
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	4e0d      	ldr	r6, [pc, #52]	; (8002188 <__libc_init_array+0x38>)
 8002154:	4c0d      	ldr	r4, [pc, #52]	; (800218c <__libc_init_array+0x3c>)
 8002156:	1ba4      	subs	r4, r4, r6
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	2500      	movs	r5, #0
 800215c:	42a5      	cmp	r5, r4
 800215e:	d109      	bne.n	8002174 <__libc_init_array+0x24>
 8002160:	4e0b      	ldr	r6, [pc, #44]	; (8002190 <__libc_init_array+0x40>)
 8002162:	4c0c      	ldr	r4, [pc, #48]	; (8002194 <__libc_init_array+0x44>)
 8002164:	f000 f820 	bl	80021a8 <_init>
 8002168:	1ba4      	subs	r4, r4, r6
 800216a:	10a4      	asrs	r4, r4, #2
 800216c:	2500      	movs	r5, #0
 800216e:	42a5      	cmp	r5, r4
 8002170:	d105      	bne.n	800217e <__libc_init_array+0x2e>
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002178:	4798      	blx	r3
 800217a:	3501      	adds	r5, #1
 800217c:	e7ee      	b.n	800215c <__libc_init_array+0xc>
 800217e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002182:	4798      	blx	r3
 8002184:	3501      	adds	r5, #1
 8002186:	e7f2      	b.n	800216e <__libc_init_array+0x1e>
 8002188:	08002200 	.word	0x08002200
 800218c:	08002200 	.word	0x08002200
 8002190:	08002200 	.word	0x08002200
 8002194:	08002204 	.word	0x08002204

08002198 <memset>:
 8002198:	4402      	add	r2, r0
 800219a:	4603      	mov	r3, r0
 800219c:	4293      	cmp	r3, r2
 800219e:	d100      	bne.n	80021a2 <memset+0xa>
 80021a0:	4770      	bx	lr
 80021a2:	f803 1b01 	strb.w	r1, [r3], #1
 80021a6:	e7f9      	b.n	800219c <memset+0x4>

080021a8 <_init>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr

080021b4 <_fini>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	bf00      	nop
 80021b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ba:	bc08      	pop	{r3}
 80021bc:	469e      	mov	lr, r3
 80021be:	4770      	bx	lr
